@inject IJSRuntime JSRuntime

<div class="fieldValue @(isOver ? "highlight" : "noHighlight")"
     @onmouseover=@onMouseOver
     @onmouseout=@onMouseLeave
     @onclick=@onClick
     data-toggle="tooltip" data-placement="right">
    @((MarkupString)FieldValue)*
</div>
@code {
    protected string fieldFormattedInfo { get; set; }
    protected bool isOver { get; set; }


    // info to show at end of line
    [Parameter]
    public EventCallback<string> LineInfo { get; set; }
    // mouse over
    [Parameter]
    public EventCallback<string> MouseOvered { get; set; }

    [Parameter]
    public EventCallback<string> Clicked { get; set; }

    // input fields
    [Parameter]
    public x12interpretor.Models.x12field FieldInfo { get; set; }

    [Parameter]
    public Dictionary<string, string> ExtraValues { get; set; }

    [Parameter]
    public string LineCode { get; set; }

    [Parameter]
    public string FieldValue { get; set; }

    public async Task onClick(MouseEventArgs args)
    {
        await ensureFormattedInfo();
        await Clicked.InvokeAsync(fieldFormattedInfo);
    }


    public async Task onMouseOver()
    {
        isOver = true;
        await ensureFormattedInfo();

        await MouseOvered.InvokeAsync(fieldFormattedInfo);
    }
    /*        if (LineCode == "N1" && FieldInfo.Ordinal == 4)
            {
                var val = FieldValue;
                var idx = val.IndexOf(">");
                if (idx > 0)
                    val = val.Substring(idx, val.IndexOf("<", idx) - idx);

                var sql = $"SELECT * FROM Split..sbLocationsAccts WHERE ShipToAcct = {val}";

                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", val);
            }
    */
    private async Task ensureFormattedInfo()
    {
        // if already string formtted
        if (!string.IsNullOrWhiteSpace(fieldFormattedInfo))
        {
            await MouseOvered.InvokeAsync(fieldFormattedInfo);
            return;
        }

        if (FieldInfo is null || string.IsNullOrWhiteSpace(FieldValue))
        {
            // if not the initial LineCode
            fieldFormattedInfo = generateLineCode();
        }
        else
        {
            doNonNDC();
        }
    }

    private string generateNDCInfo(string mapped, string ndc)
    {
        string result = $@"<table>
<tr><td>Line:</td><td>{LineCode}</td></tr>
<tr><td>Field:</td><td>{FieldInfo.FieldName}</td></tr>
<tr><td colspan=2></br></td></tr>
<tr><td>Value:</td><td>{FieldValue}</td></tr>";

        if (!string.IsNullOrWhiteSpace(mapped))
            result = $"{result}<tr><td colspan=2></br></td></tr><tr><td>NDC</br>Info:</td><td>{mapped}</td></tr>";

        if (!string.IsNullOrWhiteSpace(ndc))
            result = $"{result}<tr><td colspan=2></br></td></tr><tr><td>10 Digit</br>NDC:</td><td>{ndc}</td></tr>";

        return $"{result}</table>";
    }

    private string generateFieldInfo(string mapped)
    {

        string result = $@"<table>
<tr><td>Line:</td><td>{LineCode}</td></tr>
<tr><td>Field:</td><td>{FieldInfo.FieldName}</td></tr>
<tr><td colspan=2></br></td></tr>
<tr><td>Min Len:</td><td>{FieldInfo.MinLen}</td></tr>
<tr><td>Max Len:</td><td>{FieldInfo.MaxLen}</td></tr>
<tr><td>Required:</td><td>{FieldInfo.IsRequired}</td></tr>
<tr><td colspan=2></br></td></tr>
<tr><td>Value:</td><td style='color:black !important'>{FieldValue}</td></tr>";

        if (ExtraValues is not null)
        {
            result = $"{result}<tr><td colspan=2></br></td></tr>";
            foreach (var pp in ExtraValues)
            {
                result = $"{result}<tr><td>{pp.Key}</td><td>{pp.Value}</td></tr>";
            }
            result = $"{result}<tr><td colspan=2></br></td></tr>";
        }

        if (!string.IsNullOrWhiteSpace(mapped))
            return $"{result}<tr><td colspan=2></br></td></tr><tr><td>Value Code:</td><td>{mapped}</td></tr>";

        return $"{result}</table>";
    }

    private string generateLineCode()
    {
        return $@"<table><tr><td>Line:</td><td>{FieldValue}</td></tr></table>";
    }

    private void doNonNDC()
    {
        if (string.IsNullOrWhiteSpace(FieldValue) || FieldInfo.ValueMap is null)
            fieldFormattedInfo = generateFieldInfo(null);

        else if (FieldInfo.ValueMap.ContainsKey(FieldValue.Trim()))
            fieldFormattedInfo = generateFieldInfo(FieldInfo.ValueMap[FieldValue.Trim()]);

        else
            fieldFormattedInfo = generateFieldInfo(null);
    }

    public void onMouseLeave()
    {
        isOver = false;
        StateHasChanged();
    }
}