@inject IJSRuntime JSRuntime
@using x12interpretor.Models
 
<div class="fieldValue @(isOver ? "highlight" : "")"
     @onmouseover=@onMouseOver
     @onmouseout=@onMouseLeave
     @onclick=@onClick>
    @((MarkupString)FieldResult.DisplayValue)<div class="seperator">*</div>
</div>
@code {
    protected string fieldFormattedInfo { get; set; }
    protected bool isOver { get; set; }


    // info to show at end of line
    [Parameter]
    public EventCallback<string> LineInfo { get; set; }
    // mouse over
    [Parameter]
    public EventCallback<string> MouseOvered { get; set; }
    // item clicked on
    [Parameter]
    public EventCallback<string> Clicked { get; set; }

    [Parameter]
    public x12fieldResult FieldResult { get; set; }


    [Parameter]
    public string LineCode { get; set; }


    // mouse events 
    public async Task onClick(MouseEventArgs args)
    {
        await ensureFormattedInfo();
        await Clicked.InvokeAsync(fieldFormattedInfo);
    }

    public async Task onMouseOver()
    {
        isOver = true;
        await ensureFormattedInfo();

        await MouseOvered.InvokeAsync(fieldFormattedInfo);
    }

    public void onMouseLeave()
    {
        isOver = false;
        StateHasChanged();
    }

    // line formatting
    private async Task ensureFormattedInfo()
    {
        // if already string formtted
        if (!string.IsNullOrWhiteSpace(fieldFormattedInfo))
        {
            await MouseOvered.InvokeAsync(fieldFormattedInfo);
            return;
        }

        if (FieldResult.Field.Ordinal == 0)
            // if not the initial LineCode
            generateLineCode();
        else
            doNonNDC();
    }

    private void generateLineCode()
    {
        fieldFormattedInfo = $@"<table><tr><td>Line:</td><td>{LineCode}</td></tr></table>";
    }

    private string generateFieldInfo(string mapped)
    {
        System.Text.StringBuilder result = new System.Text.StringBuilder($@"<table>
<tr><td>Line:</td><td>{LineCode}</td></tr>
<tr><td>Field:</td><td>{FieldResult.Field.FieldName}</td></tr>
<tr><td colspan=2></br></td></tr>
<tr><td>Min Len:</td><td>{FieldResult.Field.MinLen}</td></tr>
<tr><td>Max Len:</td><td>{FieldResult.Field.MaxLen}</td></tr>
<tr><td>Required:</td><td>{FieldResult.Field.IsRequired}</td></tr>
<tr><td colspan=2></br></td></tr>
<tr><td>Value:</td><td >{FieldResult.FileValue ?? ""}</td></tr>");

        if (FieldResult.ExtraValues is not null)
        {
            result.Append("<tr><td colspan=2></br></td></tr>");
            foreach (var pp in FieldResult.ExtraValues)
            {
                result.Append($"<tr><td>{pp.Key}</td><td>{pp.Value}</td></tr>");
            }
            result.Append("<tr><td colspan=2></br></td></tr>");
        }

        if (!string.IsNullOrWhiteSpace(mapped))
            result.Append($"<tr><td colspan=2></br></td></tr><tr><td>Value Code:</td><td>{mapped}</td></tr>");

        if (FieldResult.Field.ValueMap is not null && FieldResult.Field.ValueMap.Any())
        {
            result.Append("<tr><td colspan=2></br></td></tr><tr><td colspan=2><div class='valueMapTable'><table>");
            foreach (var pp in FieldResult.Field.ValueMap.OrderBy(z => z.Key))
            {
                if (FieldResult.FileValue == pp.Key)
                    result.Append($"<tr><td class='detailCode matched'>{pp.Key}</td><td class='matched'>{pp.Value}</td></tr>");
                else
                    result.Append($"<tr><td class='detailCode'>{pp.Key}</td><td>{pp.Value}</td></tr>");
            }
            result.Append("</table></div></td></tr><tr><td colspan=2></br></td></tr>");
        }

        return $"{result}</table>";
    }

    private void doNonNDC()
    {
        // if there's a map, then check if in there        
        if ( FieldResult.FileValue is not null
            && FieldResult.Field.ValueMap is not null
            && FieldResult.Field.ValueMap.ContainsKey(FieldResult.FileValue.Trim()))
            fieldFormattedInfo = generateFieldInfo(FieldResult.Field.ValueMap[FieldResult.FileValue.Trim()]);
        else
            // otherwise just use default
            fieldFormattedInfo = generateFieldInfo(null);
    }


}