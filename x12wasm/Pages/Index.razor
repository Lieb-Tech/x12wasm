@page "/"
@inject IJSRuntime JSRuntime

@using System.IO;
@using x12FileParser;
@using x12FileParser.Models;
@using x12wasm.Formtters;
@using x12wasm.Models;

<h1 style="margin:10px;">X12 Inspector</h1>
<div>
    Mode: <select @onchange=@selectLightDark>
        slee
        <option value="Light">Light</option>
        <option value="Dark">Dark</option>
    </select>&nbsp;
    Formatter: <select @onchange=@selectMode>
        <option value="Default">Default</option>
        <option value="Focus850">850 Focus</option>
        <option value="Focus832">832 Focus</option>
    </select>
    &nbsp;
    Style: <select @onchange=@selectStyle>
        <option value="Default">All Fields</option>
        <option value="Summary">Summary</option>
    </select>
    <div style="display:inline-block;" class="drag-drop-zone">
        <InputFile OnChange=@fileChange multiple></InputFile>
        @((MarkupString)FileDragDrop)
    </div>
</div>
<div class="flex-container" @ondrop:preventDefault="true">
    <div class="flex-item-left flex-item-left-light" ondrop="event.preventDefault()">
        @* will I need a horizontal scroll bar for the "tabs"? *@
        <div class="btn-group" role="group">
            @foreach (var result in ResultSet)
            {
                <button id=@(result.FileName.GetHashCode()) class="btn btn-active" @onclick="(e) => tabClick(result.FileName, e)">@result.FileName</button>
            }
        </div>
        <br />        
        @if (CurrentSet is not null)
        {
            if (RecapMode)
            {
                <Recap RecapData=@CurrentRecap Mode=@currentMode> </Recap>
            }
            else
            {
                foreach (var line in CurrentSet.Lines)
                {
                    <X12TextLine MouseOvered=@mouseOvered Clicked=@clicked Line=line></X12TextLine>
                }
            }
        }
    </div>
    <div class="flex-item-right">
        <Details @ref=@details> </Details>
    </div>
</div>

@code {

    private string FileDragDrop { get; set; }
    private Interpretor interp = new Interpretor();

    private bool RecapMode;

    // default mode
    private IFormatter currentFormatter = new DefaultLineFormatter();

    // all the files loaded
    public List<FileResult> ResultSet { get; set; }

    // currently displayed tab
    public FileResult CurrentSet { get; set; }
    public x12summaryResult CurrentRecap { get; set; } = new();

    // details.razor -- used as @ref to send info from mouse events
    private Details details;

    private string currentMode = "light";

    public Index()
    {
        RecapMode = false;
        ResultSet = new List<FileResult>();
        FileDragDrop = "You can drag/drop multiple 850 files &nbsp;<em>here</em>, or click to browse for the file.";
        JSRuntime.InvokeVoidAsync("resized");
    }

    // send mouse events to Details
    public void mouseOvered(string info)
    {
        details.mouseOvered(info);
    }
    // send mouse events to Details
    public void clicked(string info)
    {
        details.clicked(info);
    }

    // file name clicked
    public async Task tabClick(string file, MouseEventArgs args)
    {
        await updateCurrent(ResultSet.First(z => z.FileName == file));

        StateHasChanged();
        JSRuntime.InvokeVoidAsync("resized");
    }


    void generateRecap()
    {
        if (CurrentSet is not null)
        {
            var s850 = new x12FileParser.SummaryGenerator.Summary850();
            CurrentRecap = s850.ProcessFile(CurrentSet.ToX12FileResult());
        }   
    }

    void selectStyle(ChangeEventArgs e)
    {
        RecapMode = !RecapMode;

        if (RecapMode)
            generateRecap();

        updateAllResultsMode();

        StateHasChanged();
        JSRuntime.InvokeVoidAsync("resized");
    }

    // change the UI mode for all loaded files
    void selectMode(ChangeEventArgs e)
    {
        currentFormatter = e.Value.ToString() switch
        {
            "PO1" => new SectionFormatter("PO1", "PO1"),
            "Focus850" => new FocusModeClassLineFormatter(),
            _ => new DefaultLineFormatter()
        };

        if (e.Value.ToString() == "PO1")
            showMissing();

        updateAllResultsMode();
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("resized");
    }

    private async Task selectLightDark(ChangeEventArgs e)
    {
        currentMode = e.Value.ToString().ToLower();

        updateAllResultsMode();

        if (currentMode == "dark")
            await JSRuntime.InvokeVoidAsync("modes.setDark");
        else
            await JSRuntime.InvokeVoidAsync("modes.setLight");
    }

    private void updateAllResultsMode()
    {
        foreach (var result in ResultSet)
        {
            setModeOnResult(result);
        }
    }

    private void showMissing()
    {
        foreach (var file in ResultSet)
        {
            foreach (var line in file.Lines)
            {
                foreach (var field in line.FieldResults ?? new())
                {
                    // if a required field is missing
                    if (field.FileValue is null && field.Field is not null && field.Field.IsRequired)
                    {
                        field.DisplayValue = "<span style='color:orange;'>(required field missing)</span>";
                    }
                }
            }
        }
    }


    // change a result UI mode
    private void setModeOnResult(FileResult result)
    {
        // later on - make this more dynamic
        if (currentFormatter is ILineFormatter)
        {
            foreach (var line in result.Lines)
            {
                ((ILineFormatter)currentFormatter).FormatLine(line, currentMode);
            }
        }
        else
        {
            ((IFileFormatter)currentFormatter).FormatFile(result);
        }

    }

    private async Task updateCurrent(FileResult result)
    {
        // update the css classes for the buttons
        await JSRuntime.InvokeVoidAsync("activeButton.setActive", "#" + result.FileName.GetHashCode());
        CurrentSet = result;
        if (RecapMode) generateRecap();

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("resized");
    }

    // files dropped or browsed for - process
    public async Task fileChange(InputFileChangeEventArgs dea)
    {
        var files = dea.GetMultipleFiles(5);

        FileDragDrop = $"Processing {files.Count} file(s)";

        foreach (var file in files)
        {
            await processFile(file);
        }

        StateHasChanged();

        FileDragDrop = "You can drag/drop multiple 850 files &nbsp;<em>here</em>, or click to browse for the file.";
        StateHasChanged();

        // make first file loaded the active
        await updateCurrent(ResultSet.Last());

        await JSRuntime.InvokeVoidAsync("resized");
        StateHasChanged();

    }

    // process 1 file
    private async Task processFile(IBrowserFile file)
    {
        // load the data
        using var rdr = new StreamReader(file.OpenReadStream());
        var info = await rdr.ReadToEndAsync();

        // process the data
        var results = await interp.ProcessFileAsync(info);

        var data = new FileResult(results);
        data.FileName = file.Name;

        // update display field to match current selected mode
        setModeOnResult(data);
        // save to list
        ResultSet.Add(data);
    }
}
