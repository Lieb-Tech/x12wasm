@page "/"
@inject IJSRuntime JSRuntime

@using System.IO;
@using x12interpretor;
@using x12interpretor.Models;
@using x12wasm.Formtters; 

<h1>X12 EDI Interpretor</h1>
Mode: <select @onchange=@selectMode>
    <option value="Default">Default</option>
    <option value="Focus850">850 Focus</option>
    <option value="PO1">PO1 Highlighter</option>
</select>
<div class="drag-drop-zone">
    <InputFile OnChange=@fileChange multiple></InputFile>
    @((MarkupString)fileDragDrop)
</div>

<div class="flex-container" @ondrop:preventDefault="true">
    <div class="flex-item-left" ondrop="event.preventDefault()">
        @* will I need a horizontal scroll bar? *@
        <div class="btn-group" role="group">
            @foreach (var result in ResultSet)
            {
                <button id=@(result.FileName.GetHashCode()) class="btn btn-active" @onclick="(e) => tabClick(result.FileName, e)">@result.FileName</button>
            }
        </div>
        <br />
        <br />
        @if (CurrentSet is not null)
        {
            foreach (var line in CurrentSet.Lines)
            {
                <X12TextLine MouseOvered=@mouseOvered Clicked=@clicked Line=line></X12TextLine>
            }
        }
    </div>
    <div class="flex-item-right">
        <Details @ref=@details> </Details>

    </div>
</div>

@code {
    private string fileDragDrop { get; set; }
    private Interpretor interp = new Interpretor();

    // default mode
    private IFormatter currentFormatter = new DefaultLineFormatter();

    // all the files loaded
    public List<x12fileResult> ResultSet { get; set; }

    // currently displayed tab
    public x12fileResult CurrentSet { get; set; }

    // details.razor -- used as @ref to send info from mouse events
    private Details details;

    public Index()
    {
        ResultSet = new List<x12interpretor.Models.x12fileResult>();
        fileDragDrop = "You can drag/drop multiple 850 files &nbsp;<em>here</em>, or click to browse for the file.";
    }

    // send mouse events to Details
    public void mouseOvered(string info)
    {
        details.mouseOvered(info);
    }
    // send mouse events to Details
    public void clicked(string info)
    {
        details.clicked(info);
    }

    // file name clicked
    public async Task tabClick(string file, MouseEventArgs args)
    {
        await updateCurrent(ResultSet.First(z => z.FileName == file));
    }

    // change the UI mode for all loaded files
    void selectMode(ChangeEventArgs e)
    {
        currentFormatter = e.Value.ToString() switch
        {
            "PO1" => new SectionFormatter("PO1", "PO1"),
            "Focus850" => new FocusModeLineFormatter(),
            _ => new DefaultLineFormatter()
        };

        foreach (var result in ResultSet)
        {
            setModeOnResult(result);
        }
    }

    // change a result UI mode
    private void setModeOnResult(x12fileResult result)
    {
        // later on - make this more dynamic
        if (currentFormatter is ILineFormatter)
        {
            foreach (var line in result.Lines)
            {
                ((ILineFormatter)currentFormatter).FormatLine(line);
            }
        }
        else
        {
            ((IFileFormatter)currentFormatter).FormatFile(result);
        }
    }

    private async Task updateCurrent(x12fileResult result)
    {
        // update the css classes for the buttons
        await JSRuntime.InvokeVoidAsync("activeButton.setActive", "#" + result.FileName.GetHashCode());
        CurrentSet = result;
    }

    // files dropped or browsed for - process
    public async Task fileChange(InputFileChangeEventArgs dea)
    {
        var files = dea.GetMultipleFiles(5);

        fileDragDrop = $"Processing {files.Count} file(s)";

        foreach (var file in files)
        {
            await processFile(file);
        }

        StateHasChanged();

        fileDragDrop = "You can drag/drop multiple 850 files &nbsp;<em>here</em>, or click to browse for the file.";
        StateHasChanged();

        // make first file loaded the active
        await updateCurrent(ResultSet.Last());
        StateHasChanged();

    }

    // process 1 file
    private async Task processFile(IBrowserFile file)
    {
        // load the data
        using var rdr = new StreamReader(file.OpenReadStream());
        var info = await rdr.ReadToEndAsync();

        // process the data
        var data = await interp.ProcessFileAsync(info);
        data.FileName = file.Name;

        // update display field to match current selected mode
        setModeOnResult(data);
        // save to list
        ResultSet.Add(data);
    }
}
